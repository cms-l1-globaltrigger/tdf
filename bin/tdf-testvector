#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# Copyright 2013-2014 Bernhard Arnold <bernahrd.arnold@cern.ch>
#                     Johannes Wittmann <johannes.wittmann@cern.ch>
#
# Repository path   : $HeadURL: svn://heros.hephy.oeaw.ac.at/GlobalTriggerUpgrade/software/tdf/trunk/bin/tdf-testvector $
# Last committed    : $Revision: 3269 $
# Last changed by   : $Author: arnold $
# Last changed date : $Date: 2014-09-26 12:07:44 +0200 (Fri, 26 Sep 2014) $
#

import sys, os

from tdf.extern import argparse
from tdf.core.settings import TDF
from tdf.core.testvector import TestVector, TestVectorReader

__version__ = '$Revision: 3269 $'

# -----------------------------------------------------------------------------
#  Helpers
# -----------------------------------------------------------------------------

def formatted_row(formats, row, names):
    """Print formatted data row."""
    items = []
    for name in names:
        if type(row[name]) in (list, tuple):
            for item in row[name]:
                items.append(formats[name].format(**{name : item}))
        else:
            items.append(formats[name].format(**{name : row[name]}))
    return ' '.join(items)

# -----------------------------------------------------------------------------
#  Argument parsing
# -----------------------------------------------------------------------------

def parse():
    """Returns parsed command lien arguments."""
    argp = argparse.ArgumentParser(
        prog        = 'tdf-testvector',
        description = "Test Vector tool for validation and data export",
        epilog      = "Report bugs to <bernhard.arnold@chern.ch>."
    )
    argp.add_argument('filename', metavar = '<file>', type = argparse.FileType('rb'))
    argp.add_argument('-e', '--export', dest = 'export', choices = ('input', 'algorithm', 'finor'), help = "export data")
    argp.add_argument('--raw', dest = 'raw', action = 'store_true', help = "export data")
    argp.add_argument('-V, --version', action='version', version='%(prog)s {__version__}'.format(**globals()))
    return argp.parse_args()

# -----------------------------------------------------------------------------
#  Main routine
# -----------------------------------------------------------------------------

def main():
    args = parse()

    try:
        if args.export:
            reader = TestVectorReader(args.filename)

            rows = []
            formats = reader.str_formats()

            for row in reader:

                if args.export == 'input':
                    rows.append(formatted_row(formats, row, ('muon', 'eg', 'tau', 'jet', 'ett', 'ht', 'etm', 'htm', 'ext_con', )))

                elif args.export == 'algorithm':
                    rows.append(formatted_row(formats, row, ('algorithm', )))

                elif args.export == 'finor':
                    rows.append(formatted_row(formats, row, ('finor', )))

            if args.raw:
                print '\n'.join(rows).replace(' ', '')
            else:
                print '\n'.join(rows)

            return TDF.EXIT_SUCCESS

        tv = TestVector(args.filename)
        event_count = len(tv.muon(0))

        print "Test Vector:", os.path.basename(args.filename.name)
        print " name:", tv.name
        print " description:", tv.description
        print " datetime:", tv.datetime
        print " events:", tv.events
        print " menu_name:", tv.menu_name
        print " menu_uuid:", tv.menu_uuid
        print "Number of BX data:", event_count

        if event_count != int(tv.events):
            raise RuntimeError("events count mismatch: header={tv.events} count={event_count}")

        return TDF.EXIT_SUCCESS

    except RuntimeError, message:
        print "error:", message

    return TDF.EXIT_FAIL

if __name__ == '__main__':
    sys.exit(main())
