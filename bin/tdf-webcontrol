#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from tdf.extern import bottle
from tdf.extern.bottle import route, view, run, template
from tdf.extern import argparse
from tdf.extern import yaml
from tdf.core import TDF

import uhal
import sys, os

__version__ = '$Revision: $'

# Append HTML template location.
bottle.TEMPLATE_PATH.append(os.path.join(TDF.ROOT_DIR, 'etc', 'shared', 'webcontrol', 'templates'))

from tdf.core import TDFCore
import uhal
import sys
import tempfile

CRATE_NAME = 'vienna_testing'
STATES = enum('UNKNOWN_DEVICE', 'DEVICE_PRESENT', 'DEVICE_NOT_CONFIGURED', 'DEVICE_NOT_PRESENT')

def cratescan(tdf):

    chk_present = 'chk_present'
    chk_configured = 'chk_configured'

    class DeviceState(object):
        def __init__(self, device, state):
            self._device = device
            self._state = state
        @property
        def device(self): return self._device
        @property
        def state(self): return self._state
        @property
        def state_str(self): return STATES.reverse_mapping[self.state]
        @property
        def slot(self): return slot_number(self.device)
        @property
        def type(self): return device_type(self.device)

    config = yaml.load(open(os.path.join(TDF.SETTINGS_DIR, 'cratescan.yml')).read())

    states = []

    for device in sort_devices(tdf.connectionManager.getDevices()):
        state = STATES.UNKNOWN_DEVICE
        for device_type_ in config.keys():
            if device_type(device) == device_type_:
                if chk_present in config.get(device_type_):
                    try:
                        tdf.read(device, config.get(device_type_).get(chk_present))
                        state = STATES.DEVICE_PRESENT
                        if chk_configured in config.get(device_type_):
                            try:
                                tdf.read(device, config.get(device_type_).get(chk_configured))
                            except uhal._core.exception:
                                state = STATES.DEVICE_NOT_CONFIGURED
                    except uhal._core.exception:
                        state = STATES.DEVICE_NOT_PRESENT
                break
        states.append(DeviceState(device, state))
    return states

#print "Crate scan..."
#for state in states:
    #str_state = STATES.reverse_mapping[state.state]
    #print "device={state.device:<18} slot={state.slot:<3} type={state.type:<15} state={str_state:<21} ({state.state})".format(**locals())


api = TDFCore('file://{TDF.ROOT_DIR}/etc/uhal/connections_{CRATE_NAME}.xml'.format(**locals()))

def scansd(device, model):
    """Read stdout results from butler command (bitfiles located on uSD).
    Returns list of filenames stored on uSD card.
    """
    # Create temporary file in memory.
    tmp = tempfile.SpooledTemporaryFile()
    # Capture stdout from butler (should contain list of bitfiles).
    api.mp7butler("scansd", device, stdout = tmp)
    # Set file pointer to begin of temporary file.
    tmp.seek(0)
    # Read content of temporary file.
    result = tmp.read().strip().split("\n")
    # Close the temporary file.
    tmp.close()
    # Return list of bitfiles.
    return [filename.strip() for filename in result]


@route('/api/scansd/<device>')
@view('sample')
def index(device):
    filenames = scansd(device, 'xe')
    return dict(device = device, filenames = filenames)

@route('/')
@route('/crate')
@view('crate')
def index():
    states = cratescan(api)
    for i, state in enumerate(states):
        if state.type == 'gt_mp7':
            if state.state == STATES.DEVICE_PRESENT:
                states[i].l1menu = api.read(state.device, 'gt_mp7_gtlfdl.read_versions.l1tm_name', translate = True)
    return dict(devices = states, crate_name = CRATE_NAME)

def parse():
    parser = argparse.ArgumentParser()
    parser.add_argument('--hostname', default = "localhost", help = "set the servers hostname")
    parser.add_argument('-p', '--port', default = 8080, type = int, help = "set the servers port")
    parser.add_argument('-v', '--verbose', action = 'store_true', help = "print additional information")
    parser.add_argument('-V', '--version', action = 'version', version = "%(prog)s {0}".format(TDF.VERSION))
    return parser.parse_args()

if __name__ == '__main__':
    args = parse()

    # Disable uhal logging if not verbose mode.
    if not args.verbose:
        uhal.disableLogging()

    # Run the web application server.
    run(host = args.hostname, port = args.port)
